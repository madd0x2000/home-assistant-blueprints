blueprint:
  name: "Multi-Zone HVAC Control (with Custom Zone 3)"
  description: "Controls Zone 1/2 with complex logic and a Zone 3 with simple solar surplus logic."
  domain: automation
  input:
    # Global Sensors
    solar_production_sensor:
      name: "Solar Production Sensor"
      description: "Select a sensor for solar production (e.g., sensor.solar_power)."
      selector:
        entity:
          domain: sensor
          device_class: power

    net_consumption_sensor:
      name: "Net Consumption Sensor"
      description: "Select a sensor for net grid consumption (e.g., sensor.grid_power). Used for Zone 1/2 logic AND Zone 3 solar logic."
      selector:
        entity:
          domain: sensor
          device_class: power
          
    price_sensor:
      name: "Electricity Price Sensor"
      description: "Select a price sensor with a 'current_price' attribute."
      selector:
        entity:
          domain: sensor

    # Zone 1 Configuration
    zone1_temperature_sensor:
      name: "Zone 1 - Temperature Sensor"
      selector:
        entity:
          domain: sensor
          device_class: temperature
          
    zone1_hvac_entity:
      name: "Zone 1 - HVAC Entity"
      selector:
        entity:
          domain: climate
          
    zone1_heatpump_consumption_sensor:
      name: "Zone 1 - Heat Pump Consumption Sensor"
      selector:
        entity:
          domain: sensor

    zone1_target_temp_high:
      name: "Zone 1 - Target Temperature at Good Conditions"
      description: "The absolute maximum temperature the automation will set."
      default: 22
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"
          
    zone1_target_temp_low:
      name: "Zone 1 - Target Temperature at Poor Conditions"
      description: "This is the base target temperature when energy conditions are not ideal."
      default: 20
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"

    # Zone 2 Configuration
    zone2_temperature_sensor:
      name: "Zone 2 - Temperature Sensor"
      selector:
        entity:
          domain: sensor
          device_class: temperature
          
    zone2_hvac_entity:
      name: "Zone 2 - HVAC Entity"
      selector:
        entity:
          domain: climate
          
    zone2_heatpump_consumption_sensor:
      name: "Zone 2 - Heat Pump Consumption Sensor"
      selector:
        entity:
          domain: sensor

    zone2_target_temp_high:
      name: "Zone 2 - Target Temperature at Good Conditions"
      description: "The absolute maximum temperature the automation will set."
      default: 22
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"
          
    zone2_target_temp_low:
      name: "Zone 2 - Target Temperature at Poor Conditions"
      description: "This is the base target temperature when energy conditions are not ideal."
      default: 20
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"
          
    # --- Zone 3 Custom Configuration START ---
    zone3_hvac_entity:
      name: "Zone 3 - HVAC Entity (Custom Logic)"
      description: "Select the climate entity for Zone 3."
      selector:
        entity:
          domain: climate

    zone3_temperature_sensor:
      name: "Zone 3 - Temperature Sensor (Custom Logic)"
      description: "Select the temperature sensor for Zone 3."
      selector:
        entity:
          domain: sensor
          device_class: temperature

    zone3_base_temp:
      name: "Zone 3 - Base Temperature (Bare Minimum)"
      description: "The target temperature when you DON'T have surplus solar. (e.g., 18°C)"
      default: 18
      selector:
        number:
          min: 16
          max: 25
          step: 0.5
          unit_of_measurement: "°C"

    zone3_solar_temp:
      name: "Zone 3 - Solar Temperature (Optional Temp)"
      description: "The target temperature to set when you HAVE surplus solar."
      default: 22
      selector:
        number:
          min: 16
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
          
    zone3_surplus_threshold:
      name: "Zone 3 - Surplus Threshold (W) for Solar Mode"
      description: "Trigger 'Solar Mode' when exporting *more* than this. Must be negative (e.g., -1000 for 1000W export)."
      default: -1000
      selector:
        number:
          min: -10000
          max: 0
          step: 100
          unit_of_measurement: "W"
          
    zone3_hysteresis:
      name: "Zone 3 - Hysteresis (Turn-on offset)"
      description: "How many degrees *below* the target temp to turn on (e.g., 2.0°C)."
      default: 2.0
      selector:
        number:
          min: 0.1
          max: 5
          step: 0.1
          unit_of_measurement: "°C"
    # --- Zone 3 Custom Configuration END ---

    # Night Mode Settings (Only affects Zone 1 & 2)
    night_mode_start:
      name: "Night Mode Start Time (Zones 1 & 2 only)"
      default: "00:00:00"
      selector:
        time: {}

    night_mode_end:
      name: "Night Mode End Time (Zones 1 & 2 only)"
      default: "05:00:00"
      selector:
        time: {}

    zone1_night_temperature:
      name: "Zone 1 - Night Temperature"
      default: 18
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          unit_of_measurement: "°C"

    zone2_night_temperature:
      name: "Zone 2 - Night Temperature"
      default: 18
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          unit_of_measurement: "°C"

    # Global Settings (Zone 1 & 2)
    base_consumption:
      name: "Global - Base Household Consumption (W)"
      default: 400
      selector:
        number:
          min: 0
          max: 1000
          step: 10
          unit_of_measurement: "W"

    temperature_boost:
      name: "Global - Heating Boost (°C) (Zones 1 & 2 only)"
      description: "Boosts the temperature when conditions are not ideal."
      default: 1.0
      selector:
        number:
          min: 0
          max: 3.0
          step: 0.5
          unit_of_measurement: "°C"

    hysteresis:
      name: "Global - Hysteresis (°C) (Zones 1 & 2 only)"
      description: "How far below the target the temperature must drop before heating turns on again."
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 3.0
          step: 0.1
          unit_of_measurement: "°C"

    boost_temp_difference:
      name: "Global - Temperature Difference for Boost Fan Mode"
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"

    # Global Thresholds (Zone 1 & 2)
    solar_threshold:
      name: "Global - Solar Production Threshold (W) (Zones 1 & 2 only)"
      description: "The amount of SURPLUS solar power required to trigger 'Good Conditions'."
      default: 300
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          
    export_threshold:
      name: "Global - Energy Export Threshold (W) (Zones 1 & 2 only)"
      default: -500
      selector:
        number:
          min: -5000
          max: 0
          unit_of_measurement: "W"
          
    price_threshold:
      name: "Global - Electricity Price Threshold (öre/kWh) (Zones 1 & 2 only)"
      default: 150 
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: "öre/kWh"

    heatpump_threshold:
      name: "Global - Heat Pump Consumption Threshold (W) (Zones 1 & 2 only)"
      default: 800
      selector:
        number:
          min: 0
          max: 3000
          unit_of_measurement: "W"

    # Fan Settings
    normal_fan_mode:
      name: "Global - Normal Fan Mode"
      default: "auto"
      selector:
        select:
          options:
            - { label: "Auto", value: "auto" }
            - { label: "1 - Very Low", value: "1" }
            - { label: "2 - Low", value: "2" }
            - { label: "3 - Medium", value: "3" }
            - { label: "4 - High", value: "4" }
            - { label: "5 - Very High", value: "5" }

    boost_fan_mode:
      name: "Global - Boost Fan Mode when Cold"
      default: "4"
      selector:
        select:
          options:
            - { label: "3 - Medium", value: "3" }
            - { label: "4 - High", value: "4" }
            - { label: "5 - Very High", value: "5" }

# -----------------------------------------------------------
# GLOBAL VARIABLES
# -----------------------------------------------------------
variables:
  # Input IDs
  input_solar_sensor_id: !input solar_production_sensor
  input_net_consumption_id: !input net_consumption_sensor
  input_price_sensor_id: !input price_sensor
  input_zone1_temp_id: !input zone1_temperature_sensor
  input_zone1_hp_consumption_id: !input zone1_heatpump_consumption_sensor
  input_zone2_temp_id: !input zone2_temperature_sensor
  input_zone2_hp_consumption_id: !input zone2_heatpump_consumption_sensor
  input_zone1_hvac_entity: !input zone1_hvac_entity
  input_zone2_hvac_entity: !input zone2_hvac_entity
  # --- Zone 3 Inputs START ---
  input_zone3_hvac_entity: !input zone3_hvac_entity
  input_zone3_temp_id: !input zone3_temperature_sensor
  input_zone3_base_temp: !input zone3_base_temp
  input_zone3_solar_temp: !input zone3_solar_temp
  input_zone3_surplus_threshold: !input zone3_surplus_threshold
  input_zone3_hysteresis: !input zone3_hysteresis
  # --- Zone 3 Inputs END ---
  
  # Times
  input_night_mode_start_time: !input night_mode_start
  input_night_mode_end_time: !input night_mode_end

  # Numeric/string input values
  input_base_consumption: !input base_consumption
  input_temperature_boost: !input temperature_boost
  input_solar_threshold: !input solar_threshold
  input_export_threshold: !input export_threshold
  input_price_threshold: !input price_threshold
  input_heatpump_threshold: !input heatpump_threshold
  input_hysteresis: !input hysteresis
  input_boost_temp_difference: !input boost_temp_difference
  input_zone1_target_high: !input zone1_target_temp_high
  input_zone1_target_low: !input zone1_target_temp_low
  input_zone1_night_temp: !input zone1_night_temperature
  input_zone2_target_high: !input zone2_target_temp_high
  input_zone2_target_low: !input zone2_target_temp_low
  input_zone2_night_temp: !input zone2_night_temperature
  input_normal_fan_mode: !input normal_fan_mode
  input_boost_fan_mode: !input boost_fan_mode

  # Safely get sensor values
  solar_production: "{{ states(input_solar_sensor_id) | float(0) }}"
  net_consumption: "{{ states(input_net_consumption_id) | float(0) }}"
  
  electricity_price: >
    {% set sensor = input_price_sensor_id %}
    {% if state_attr(sensor, 'current_price') is not none %}
      {{ state_attr(sensor, 'current_price') | float(100) }}
    {% else %}
      100
    {% endif %}

  base_consumption_value: "{{ input_base_consumption | float }}"
  temperature_boost_value: "{{ input_temperature_boost | float }}"
  solar_threshold_value: "{{ input_solar_threshold | float }}"
  export_threshold_value: "{{ input_export_threshold | float }}"
  price_threshold_value: "{{ input_price_threshold | float }}"
  heatpump_threshold_value: "{{ input_heatpump_threshold | float }}"
  hysteresis_value: "{{ input_hysteresis | float }}"
  boost_temp_difference_value: "{{ input_boost_temp_difference | float }}"
  
  # Night mode check (for Zones 1 & 2)
  is_night_mode: >
    {% set nowt = now().strftime('%H:%M:%S') %}
    {% set start = input_night_mode_start_time %}
    {% set end = input_night_mode_end_time %}
    {{ (nowt >= start and nowt <= end) or (start > end and (nowt >= start or nowt <= end)) }}

# -----------------------------------------------------------
# TRIGGERS
# -----------------------------------------------------------
trigger:
  - platform: time_pattern
    minutes: "/5"
  - platform: time
    at: !input night_mode_start
  - platform: time
    at: !input night_mode_end
  # --- Add triggers for Zone 3 sensors ---
  - platform: state
    entity_id: !input zone3_temperature_sensor
  - platform: state
    entity_id: !input net_consumption_sensor

# -----------------------------------------------------------
# ACTION
# -----------------------------------------------------------
action:
  - variables:
      # --- Zone 1/2 Logic (Unchanged) ---
      zone1_current_temp: "{{ states(input_zone1_temp_id) | float(15.0) }}" 
      zone1_heatpump_consumption: "{{ states(input_zone1_hp_consumption_id) | float(0) }}"
      zone2_current_temp: "{{ states(input_zone2_temp_id) | float(15.0) }}" 
      zone2_heatpump_consumption: "{{ states(input_zone2_hp_consumption_id) | float(0) }}"
      available_solar: "{{ solar_production - base_consumption_value }}"
      has_meaningful_surplus: "{{ available_solar > solar_threshold_value }}"
      has_export_excess: "{{ net_consumption < export_threshold_value }}"
      is_low_price: "{{ electricity_price < price_threshold_value }}"
      energy_condition: >
        {% if has_export_excess %} Best (Exporting)
        {% elif has_meaningful_surplus %} Good (Solar Surplus)
        {% elif is_low_price %} OK (Low Price)
        {% else %} Poor {% endif %}
      zone1_is_low_consumption: "{{ zone1_heatpump_consumption <= heatpump_threshold_value }}"
      zone1_base_target: >
        {% if is_night_mode %}
          {{ input_zone1_night_temp | float }}
        {% else %}
          {% set high = input_zone1_target_high | float %}
          {% set low = input_zone1_target_low | float %}
          {% if has_export_excess or has_meaningful_surplus %}
            {{ high }}
          {% elif is_low_price and zone1_is_low_consumption %}
            {{ (high + low) / 2 }}
          {% else %}
            {{ low }}
          {% endif %}
        {% endif %}
      zone1_boosted_target: "{{ zone1_base_target + temperature_boost_value }}"
      zone1_final_target: "{{ [zone1_boosted_target, input_zone1_target_high] | min }}"
      zone1_limited_target: "{{ [10, [zone1_final_target, 31] | min] | max }}"
      zone1_should_turn_off: "{{ zone1_current_temp >= zone1_limited_target }}"
      zone1_needs_heating: "{{ zone1_current_temp < (zone1_limited_target - hysteresis_value) }}"
      zone1_temp_diff: "{{ zone1_limited_target - zone1_current_temp }}"
      zone1_needs_boost: "{{ zone1_temp_diff >= boost_temp_difference_value }}"
      zone1_selected_fan_mode: "{{ input_boost_fan_mode if zone1_needs_boost else input_normal_fan_mode }}"
      zone1_current_mode: "{{ state_attr(input_zone1_hvac_entity, 'hvac_mode') }}"
      zone2_is_low_consumption: "{{ zone2_heatpump_consumption <= heatpump_threshold_value }}"
      zone2_base_target: >
        {% if is_night_mode %}
          {{ input_zone2_night_temp | float }}
        {% else %}
          {% set high = input_zone2_target_high | float %}
          {% set low = input_zone2_target_low | float %}
          {% if has_export_excess or has_meaningful_surplus %}
            {{ high }}
          {% elif is_low_price and zone2_is_low_consumption %}
            {{ (high + low) / 2 }}
          {% else %}
            {{ low }}
          {% endif %}
        {% endif %}
      zone2_boosted_target: "{{ zone2_base_target + temperature_boost_value }}"
      zone2_final_target: "{{ [zone2_boosted_target, input_zone2_target_high] | min }}"
      zone2_limited_target: "{{ [10, [zone2_final_target, 31] | min] | max }}"
      zone2_should_turn_off: "{{ zone2_current_temp >= zone2_limited_target }}"
      zone2_needs_heating: "{{ zone2_current_temp < (zone2_limited_target - hysteresis_value) }}"
      zone2_temp_diff: "{{ zone2_limited_target - zone2_current_temp }}"
      zone2_needs_boost: "{{ zone2_temp_diff >= boost_temp_difference_value }}"
      zone2_selected_fan_mode: "{{ input_boost_fan_mode if zone2_needs_boost else input_normal_fan_mode }}"
      zone2_current_mode: "{{ state_attr(input_zone2_hvac_entity, 'hvac_mode') }}"
      
      # --- Zone 3 Custom Logic START ---
      zone3_current_temp: "{{ states(input_zone3_temp_id) | float(15.0) }}"
      
      # Check if we have high solar (e.g., net_consumption is -1100, which is LESS THAN -1000)
      zone3_has_solar: "{{ net_consumption < input_zone3_surplus_threshold | float }}"
      
      # Determine target temp based on solar
      zone3_target_temp: "{{ iif(zone3_has_solar, input_zone3_solar_temp, input_zone3_base_temp) | float }}"
      
      # Apply safety limits (hardcoded 16-30 based on Qlima)
      zone3_limited_target: "{{ [16, [zone3_target_temp, 30] | min] | max }}"
      
      # Hysteresis logic using custom Zone 3 hysteresis
      zone3_needs_heating: "{{ zone3_current_temp < (zone3_limited_target - (input_zone3_hysteresis | float)) }}"
      zone3_should_turn_off: "{{ zone3_current_temp >= zone3_limited_target }}"
      
      # Fan logic (using global settings for consistency)
      zone3_temp_diff: "{{ zone3_limited_target - zone3_current_temp }}"
      zone3_needs_boost: "{{ zone3_temp_diff >= boost_temp_difference_value }}"
      zone3_selected_fan_mode: "{{ input_boost_fan_mode if zone3_needs_boost else input_normal_fan_mode }}"
      zone3_current_mode: "{{ state_attr(input_zone3_hvac_entity, 'hvac_mode') }}"
      # --- Zone 3 Custom Logic END ---

  # Zone 1 Control (Unchanged)
  - choose:
      - conditions:
          - "{{ zone1_needs_heating }}"
          - "{{ states(input_zone1_hvac_entity) == 'off' or zone1_current_mode != 'heat' }}"
        sequence:
          - service: climate.turn_on
            target: { entity_id: !input zone1_hvac_entity }
          - delay: "00:00:02"
          - service: climate.set_hvac_mode
            target: { entity_id: !input zone1_hvac_entity }
            data: { hvac_mode: heat }
          - delay: "00:00:03"
          - service: climate.set_temperature
            target: { entity_id: !input zone1_hvac_entity }
            data: { temperature: "{{ zone1_limited_target | float }}" }
          - service: climate.set_fan_mode
            target: { entity_id: !input zone1_hvac_entity }
            data: { fan_mode: "{{ zone1_selected_fan_mode }}" }
      - conditions:
          - "{{ zone1_should_turn_off }}"
          - "{{ states(input_zone1_hvac_entity) != 'off' }}"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input zone1_hvac_entity }
            data: { hvac_mode: 'off' }
      - conditions:
          - "{{ zone1_needs_heating }}"
          - "{{ zone1_current_mode == 'heat' }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input zone1_hvac_entity }
            data: { temperature: "{{ zone1_limited_target | float }}" }
          - service: climate.set_fan_mode
            target: { entity_id: !input zone1_hvac_entity }
            data: { fan_mode: "{{ zone1_selected_fan_mode }}" }

  # Zone 2 Control (Unchanged)
  - choose:
      - conditions:
          - "{{ zone2_needs_heating }}"
          - "{{ states(input_zone2_hvac_entity) == 'off' or zone2_current_mode != 'heat' }}"
        sequence:
          - service: climate.turn_on
            target: { entity_id: !input zone2_hvac_entity }
          - delay: "00:00:02"
          - service: climate.set_hvac_mode
            target: { entity_id: !input zone2_hvac_entity }
            data: { hvac_mode: heat }
          - delay: "00:00:03"
          - service: climate.set_temperature
            target: { entity_id: !input zone2_hvac_entity }
            data: { temperature: "{{ zone2_limited_target | float }}" }
          - service: climate.set_fan_mode
            target: { entity_id: !input zone2_hvac_entity }
            data: { fan_mode: "{{ zone2_selected_fan_mode }}" }
      - conditions:
          - "{{ zone2_should_turn_off }}"
          - "{{ states(input_zone2_hvac_entity) != 'off' }}"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input zone2_hvac_entity }
            data: { hvac_mode: 'off' }
      - conditions:
          - "{{ zone2_needs_heating }}"
          - "{{ zone2_current_mode == 'heat' }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input zone2_hvac_entity }
            data: { temperature: "{{ zone2_limited_target | float }}" }
          - service: climate.set_fan_mode
            target: { entity_id: !input zone2_hvac_entity }
            data: { fan_mode: "{{ zone2_selected_fan_mode }}" }
            
  # --- Zone 3 Custom Control START ---
  - choose:
      # --- CONDITION 1: TURN ON ---
      - conditions:
          - "{{ zone3_needs_heating }}"
          - "{{ states(input_zone3_hvac_entity) == 'off' or zone3_current_mode != 'heat' }}"
        sequence:
          - service: climate.turn_on
            target: { entity_id: !input zone3_hvac_entity }
          - delay: "00:00:02"
          - service: climate.set_hvac_mode
            target: { entity_id: !input zone3_hvac_entity }
            data: { hvac_mode: heat }
          - delay: "00:00:03"
          - service: climate.set_temperature
            target: { entity_id: !input zone3_hvac_entity }
            data: { temperature: "{{ zone3_limited_target | float }}" }
          - service: climate.set_fan_mode
            target: { entity_id: !input zone3_hvac_entity }
            data: { fan_mode: "{{ zone3_selected_fan_mode }}" }
            
      # --- CONDITION 2: TURN OFF ---
      - conditions:
          - "{{ zone3_should_turn_off }}"
          - "{{ states(input_zone3_hvac_entity) != 'off' }}"
        sequence:
          - service: climate.set_hvac_mode
            target: { entity_id: !input zone3_hvac_entity }
            data: { hvac_mode: 'off' }
            
      # --- CONDITION 3: UPDATE TARGET (if already on) ---
      - conditions:
          - "{{ zone3_needs_heating }}"
          - "{{ zone3_current_mode == 'heat' }}"
          - "{{ state_attr(input_zone3_hvac_entity, 'temperature') | float != zone3_limited_target }}"
        sequence:
          - service: climate.set_temperature
            target: { entity_id: !input zone3_hvac_entity }
            data: { temperature: "{{ zone3_limited_target | float }}" }
          - service: climate.set_fan_mode
            target: { entity_id: !input zone3_hvac_entity }
            data: { fan_mode: "{{ zone3_selected_fan_mode }}" }
  # --- Zone 3 Custom Control END ---

  # Debug Notification
  - service: persistent_notification.create
    data:
      notification_id: "hvac_control_debug_{{ this.entity_id }}"
      title: "HVAC Status @ {{ now().strftime('%H:%M') }}"
      message: |
        **Energy**: {{ energy_condition }} (Surplus: {{ available_solar | round(0) }}W, Price: {{ electricity_price | round(2) }} öre)
        ---
        **Zone 1: {{ state_attr(input_zone1_hvac_entity, 'friendly_name') | default('Zone 1') }}**
        - Status: `{{ states(input_zone1_hvac_entity) }}`
        - Target: `{{ zone1_limited_target | float | round(1) }}°C`
        - Current: `{{ zone1_current_temp | float | round(1) }}°C`
        - Decision: **{% if zone1_needs_heating %} HEAT {% elif zone1_should_turn_off %} OFF {% else %} IDLE {% endif %}**
        ---
        **Zone 2: {{ state_attr(input_zone2_hvac_entity, 'friendly_name') | default('Zone 2') }}**
        - Status: `{{ states(input_zone2_hvac_entity) }}`
        - Target: `{{ zone2_limited_target | float | round(1) }}°C`
        - Current: `{{ zone2_current_temp | float | round(1) }}°C`
        - Decision: **{% if zone2_needs_heating %} HEAT {% elif zone2_should_turn_off %} OFF {% else %} IDLE {% endif %}**
        ---
        **Zone 3: {{ state_attr(input_zone3_hvac_entity, 'friendly_name') | default('Zone 3') }} (Custom)**
        - Status: `{{ states(input_zone3_hvac_entity) }}`
        - Target: `{{ zone3_limited_target | float | round(1) }}°C` (Solar: {{ zone3_has_solar }})
        - Current: `{{ zone3_current_temp | float | round(1) }}°C`
        - Decision: **{% if zone3_needs_heating %} HEAT {% elif zone3_should_turn_off %} OFF {% else %} IDLE {% endif %}**

mode: restart
