blueprint:
  name: "Multi-Zone HVAC Control with Energy Price & Solar"
  description: "Control multiple HVAC zones based on temperature, electricity price, solar production and heat pump consumption"
  domain: automation
  input:
    # Global Sensors - Utan default värden
    solar_production_sensor:
      name: "Solar Production Sensor"
      description: "Välj sensor för solproduktion (t.ex. sensor.solax_now)"
      selector:
        entity:
          domain: sensor
          
    net_consumption_sensor:
      name: "Net Consumption Sensor" 
      description: "Välj sensor för nettoförbrukning (t.ex. sensor.remaining_power)"
      selector:
        entity:
          domain: sensor
          
    price_sensor:
      name: "Electricity Price Sensor"
      description: "Välj sensor för elpris med current_price attribut (t.ex. sensor.nordpool_kwh_se3_sek_0_00_025)"
      selector:
        entity:
          domain: sensor

    # Zone 1 Configuration
    zone1_temperature_sensor:
      name: "Zone 1 - Temperature Sensor"
      selector:
        entity:
          domain: sensor
          device_class: temperature
          
    zone1_hvac_entity:
      name: "Zone 1 - HVAC Entity"
      selector:
        entity:
          domain: climate
          
    zone1_heatpump_consumption_sensor:
      name: "Zone 1 - Heat Pump Consumption Sensor"
      selector:
        entity:
          domain: sensor

    zone1_target_temp_high:
      name: "Zone 1 - Target Temperature at Good Conditions"
      default: 22
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"
          
    zone1_target_temp_low:
      name: "Zone 1 - Target Temperature at Poor Conditions"
      default: 20
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"

    # Zone 2 Configuration
    zone2_temperature_sensor:
      name: "Zone 2 - Temperature Sensor"
      selector:
        entity:
          domain: sensor
          device_class: temperature
          
    zone2_hvac_entity:
      name: "Zone 2 - HVAC Entity"
      selector:
        entity:
          domain: climate
          
    zone2_heatpump_consumption_sensor:
      name: "Zone 2 - Heat Pump Consumption Sensor"
      selector:
        entity:
          domain: sensor

    zone2_target_temp_high:
      name: "Zone 2 - Target Temperature at Good Conditions"
      default: 22
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"
          
    zone2_target_temp_low:
      name: "Zone 2 - Target Temperature at Poor Conditions"
      default: 20
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"

    # Night Mode Settings
    night_mode_start:
      name: "Night Mode Start Time"
      default: "00:00:00"
      selector:
        time: {}

    night_mode_end:
      name: "Night Mode End Time"
      default: "05:00:00"
      selector:
        time: {}

    zone1_night_temperature:
      name: "Zone 1 - Night Temperature"
      default: 18
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          unit_of_measurement: "°C"

    zone2_night_temperature:
      name: "Zone 2 - Night Temperature"
      default: 18
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          unit_of_measurement: "°C"

    # Global Settings
    base_consumption:
      name: "Base Household Consumption (W)"
      default: 400
      selector:
        number:
          min: 0
          max: 1000
          step: 10
          unit_of_measurement: "W"

    temperature_boost:
      name: "Temperature Boost for Heating (°C)"
      default: 1.0
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.5
          unit_of_measurement: "°C"

    # Global Thresholds
    solar_threshold:
      name: "Solar Production Threshold (W)"
      default: 300
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          
    export_threshold:
      name: "Energy Export Threshold (W)"
      default: -500
      selector:
        number:
          min: -5000
          max: 0
          unit_of_measurement: "W"
          
    price_threshold:
      name: "Electricity Price Threshold (öre/kWh)"
      default: 150 
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: "öre/kWh"

    heatpump_threshold:
      name: "Heat Pump Consumption Threshold (W)"
      default: 800
      selector:
        number:
          min: 0
          max: 3000
          unit_of_measurement: "W"

    # Fan Settings
    normal_fan_mode:
      name: "Normal Fan Mode"
      default: "auto"
      selector:
        select:
          options:
            - label: "Auto"
              value: "auto"
            - label: "1 - Very Low"
              value: "1"
            - label: "2 - Low"
              value: "2"
            - label: "3 - Medium"
              value: "3"
            - label: "4 - High"
              value: "4"
            - label: "5 - Very High"
              value: "5"

    boost_fan_mode:
      name: "Boost Fan Mode when Cold"
      default: "4"
      selector:
        select:
          options:
            - label: "3 - Medium"
              value: "3"
            - label: "4 - High"
              value: "4"
            - label: "5 - Very High"
              value: "5"

    temp_difference:
      name: "Temperature Difference for Activation"
      default: 1.0
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.5
          unit_of_measurement: "°C"

    boost_temp_difference:
      name: "Temperature Difference for Boost Mode"
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"

# -----------------------------------------------------------
# GLOBAL VARIABLER
# -----------------------------------------------------------
variables:
  # STEG 1a: Definiera alla input-ID:n och tider.
  input_solar_sensor_id: !input solar_production_sensor
  input_net_consumption_id: !input net_consumption_sensor
  input_price_sensor_id: !input price_sensor
  input_zone1_temp_id: !input zone1_temperature_sensor
  input_zone1_hp_consumption_id: !input zone1_heatpump_consumption_sensor
  input_zone2_temp_id: !input zone2_temperature_sensor
  input_zone2_hp_consumption_id: !input zone2_heatpump_consumption_sensor
  input_zone1_hvac_entity: !input zone1_hvac_entity
  input_zone2_hvac_entity: !input zone2_hvac_entity
  input_night_mode_start_time: !input night_mode_start
  input_night_mode_end_time: !input night_mode_end

  # STEG 1b: Definiera alla numeriska/string input-värden.
  input_base_consumption: !input base_consumption
  input_temperature_boost: !input temperature_boost
  input_solar_threshold: !input solar_threshold
  input_export_threshold: !input export_threshold
  input_price_threshold: !input price_threshold
  input_heatpump_threshold: !input heatpump_threshold
  input_temp_difference: !input temp_difference
  input_boost_temp_difference: !input boost_temp_difference
  input_zone1_target_high: !input zone1_target_temp_high
  input_zone1_target_low: !input zone1_target_temp_low
  input_zone1_night_temp: !input zone1_night_temperature
  input_zone2_target_high: !input zone2_target_temp_high
  input_zone2_target_low: !input zone2_target_temp_low
  input_zone2_night_temp: !input zone2_night_temperature
  input_normal_fan_mode: !input normal_fan_mode
  input_boost_fan_mode: !input boost_fan_mode

  # STEG 2: Använd de rena variablerna i Jinja-blocken för att hämta/konvertera.
  
  # Globala Sensorer (Robust hämtning)
  solar_production: >
    {% set sensor = input_solar_sensor_id %}
    {% if sensor and states(sensor) is not none and states(sensor) not in ('unknown', 'unavailable') %}
      {{ states(sensor) | float(0) }}
    {% else %}
      0
    {% endif %}
  
  net_consumption: >
    {% set sensor = input_net_consumption_id %}
    {% if sensor and states(sensor) is not none and states(sensor) not in ('unknown', 'unavailable') %}
      {{ states(sensor) | float(0) }}
    {% else %}
      0
    {% endif %}
  
  electricity_price: >
    {% set sensor = input_price_sensor_id %}
    {% if sensor and state_attr(sensor, 'current_price') is not none %}
      {{ state_attr(sensor, 'current_price') | float(100) }}
    {% else %}
      100
    {% endif %}
  
  # Zon 1 Sensorer (Robust hämtning)
  zone1_current_temp: >
    {% set sensor = input_zone1_temp_id %}
    {% if sensor and states(sensor) is not none and states(sensor) not in ('unknown', 'unavailable') %}
      {{ states(sensor) | float(15.0) }} 
    {% else %}
      15.0
    {% endif %}

  zone1_heatpump_consumption: >
    {% set sensor = input_zone1_hp_consumption_id %}
    {% if sensor and states(sensor) is not none and states(sensor) not in ('unknown', 'unavailable') %}
      {{ states(sensor) | float(0) }}
    {% else %}
      0
    {% endif %}

  # Zon 2 Sensorer (Robust hämtning)
  zone2_current_temp: >
    {% set sensor = input_zone2_temp_id %}
    {% if sensor and states(sensor) is not none and states(sensor) not in ('unknown', 'unavailable') %}
      {{ states(sensor) | float(15.0) }} 
    {% else %}
      15.0
    {% endif %}

  zone2_heatpump_consumption: >
    {% set sensor = input_zone2_hp_consumption_id %}
    {% if sensor and states(sensor) is not none and states(sensor) not in ('unknown', 'unavailable') %}
      {{ states(sensor) | float(0) }}
    {% else %}
      0
    {% endif %}

  # Numeriska input-värden (Korrigerad konvertering)
  base_consumption_value: "{{ input_base_consumption | float }}"
  temperature_boost_value: "{{ input_temperature_boost | float }}"
  solar_threshold_value: "{{ input_solar_threshold | float }}"
  export_threshold_value: "{{ input_export_threshold | float }}"
  price_threshold_value: "{{ input_price_threshold | float }}"
  heatpump_threshold_value: "{{ input_heatpump_threshold | float }}"
  temp_difference_value: "{{ input_temp_difference | float }}"
  boost_temp_difference_value: "{{ input_boost_temp_difference | float }}"
  
  # Nattläge
  is_night_mode: >
    {% set now = now().strftime('%H:%M:%S') %}
    {% set start = input_night_mode_start_time %}
    {% set end = input_night_mode_end_time %}
    {{ (now >= start and now <= end) or (start > end and (now >= start or now <= end)) }}

# -----------------------------------------------------------
# TRIGGERS (STABILISERAD TILL ENDAST TIDSHÄNDELSER)
# -----------------------------------------------------------
trigger:
  - platform: time_pattern
    minutes: "/5" # Kör var 5:e minut
  - platform: time
    at: !input night_mode_start
  - platform: time
    at: !input night_mode_end

# -----------------------------------------------------------
# ACTION
# -----------------------------------------------------------
action:
  - variables:
      # Globala beräkningar
      has_solar_production: "{{ solar_production > solar_threshold_value }}"
      available_solar: "{{ solar_production - base_consumption_value }}"
      has_real_excess: "{{ available_solar > 0 }}"
      has_export_excess: "{{ net_consumption < export_threshold_value }}"
      is_low_price: "{{ electricity_price < price_threshold_value }}"
      
      # Zon 1 Beräkningar
      zone1_is_low_consumption: "{{ zone1_heatpump_consumption <= heatpump_threshold_value }}"
      
      zone1_base_target: >
        {% if is_night_mode %}
          {{ input_zone1_night_temp | float }}
        {% else %}
          {% set high = input_zone1_target_high | float %}
          {% set low = input_zone1_target_low | float %}

          # 1. HÖGSTA PRIORITET: RIKTIGT SOLEL-ÖVERSKOTT (Priset ignoreras)
          {% if has_real_excess %}
            {{ high }} 

          # 2. MELLANPRIORITET: Solproduktion + Lågt Pris + Låg HP-Förbrukning
          {% elif has_solar_production and is_low_price and zone1_is_low_consumption %}
            {{ (high + low) / 2 }}

          # 3. MELLANPRIORITET: Lågt Pris Endast + Låg HP-Förbrukning (Bra för förvärmning)
          {% elif is_low_price and zone1_is_low_consumption %}
            {{ (high + low) / 2 }}
            
          # 4. DEFAULT
          {% else %}
            {{ low }}
          {% endif %}
        {% endif %}
      
      zone1_final_target: "{{ zone1_base_target + temperature_boost_value }}"
      zone1_limited_target: >
        {% if zone1_final_target > 31 %}
          31
        {% elif zone1_final_target < 10 %}
          10
        {% else %}
          {{ zone1_final_target }}
        {% endif %}
      
      zone1_temp_diff: "{{ zone1_base_target - zone1_current_temp }}"
      zone1_needs_heating: "{{ zone1_current_temp < (zone1_base_target - temp_difference_value) }}"
      zone1_needs_boost: "{{ zone1_temp_diff >= boost_temp_difference_value }}"
      zone1_selected_fan_mode: "{{ input_boost_fan_mode if zone1_needs_boost else input_normal_fan_mode }}"
      zone1_current_mode: "{{ state_attr(input_zone1_hvac_entity, 'hvac_mode') }}"

      # Zon 2 Beräkningar
      zone2_is_low_consumption: "{{ zone2_heatpump_consumption <= heatpump_threshold_value }}"
      
      zone2_base_target: >
        {% if is_night_mode %}
          {{ input_zone2_night_temp | float }}
        {% else %}
          {% set high = input_zone2_target_high | float %}
          {% set low = input_zone2_target_low | float %}

          # 1. HÖGSTA PRIORITET: RIKTIGT SOLEL-ÖVERSKOTT (Priset ignoreras)
          {% if has_real_excess %}
            {{ high }} 

          # 2. MELLANPRIORITET: Solproduktion + Lågt Pris + Låg HP-Förbrukning
          {% elif has_solar_production and is_low_price and zone2_is_low_consumption %}
            {{ (high + low) / 2 }}

          # 3. MELLANPRIORITET: Lågt Pris Endast + Låg HP-Förbrukning (Bra för förvärmning)
          {% elif is_low_price and zone2_is_low_consumption %}
            {{ (high + low) / 2 }}
            
          # 4. DEFAULT
          {% else %}
            {{ low }}
          {% endif %}
        {% endif %}
      
      zone2_final_target: "{{ zone2_base_target + temperature_boost_value }}"
      zone2_limited_target: >
        {% if zone2_final_target > 31 %}
          31
        {% elif zone2_final_target < 10 %}
          10
        {% else %}
          {{ zone2_final_target }}
        {% endif %}
      
      zone2_temp_diff: "{{ zone2_base_target - zone2_current_temp }}"
      zone2_needs_heating: "{{ zone2_current_temp < (zone2_base_target - temp_difference_value) }}"
      zone2_needs_boost: "{{ zone2_temp_diff >= boost_temp_difference_value }}"
      zone2_selected_fan_mode: "{{ input_boost_fan_mode if zone2_needs_boost else input_normal_fan_mode }}"
      zone2_current_mode: "{{ state_attr(input_zone2_hvac_entity, 'hvac_mode') }}"

  # Zone 1 Control
  - choose:
      - conditions:
          - "{{ zone1_needs_heating }}"
          - "{{ states(input_zone1_hvac_entity) == 'off' or zone1_current_mode != 'heat' }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: !input zone1_hvac_entity
          - delay: "00:00:02"
          - service: climate.set_hvac_mode
            target:
              entity_id: !input zone1_hvac_entity
            data:
              hvac_mode: heat
          - delay: "00:00:03"
          - service: climate.set_temperature
            target:
              entity_id: !input zone1_hvac_entity
            data:
              temperature: "{{ zone1_limited_target }}"
          - service: climate.set_fan_mode
            target:
              entity_id: !input zone1_hvac_entity
            data:
              fan_mode: "{{ zone1_selected_fan_mode }}"
      - conditions:
          - "{{ not zone1_needs_heating }}"
          - "{{ zone1_current_mode == 'heat' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input zone1_hvac_entity
            data:
              hvac_mode: off
      - conditions:
          - "{{ zone1_needs_heating }}"
          - "{{ zone1_current_mode == 'heat' }}"
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input zone1_hvac_entity
            data:
              temperature: "{{ zone1_limited_target }}"
          - service: climate.set_fan_mode
            target:
              entity_id: !input zone1_hvac_entity
            data:
              fan_mode: "{{ zone1_selected_fan_mode }}"

  # Zone 2 Control
  - choose:
      - conditions:
          - "{{ zone2_needs_heating }}"
          - "{{ states(input_zone2_hvac_entity) == 'off' or zone2_current_mode != 'heat' }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: !input zone2_hvac_entity
          - delay: "00:00:02"
          - service: climate.set_hvac_mode
            target:
              entity_id: !input zone2_hvac_entity
            data:
              hvac_mode: heat
          - delay: "00:00:03"
          - service: climate.set_temperature
            target:
              entity_id: !input zone2_hvac_entity
            data:
              temperature: "{{ zone2_limited_target }}"
          - service: climate.set_fan_mode
            target:
              entity_id: !input zone2_hvac_entity
            data:
              fan_mode: "{{ zone2_selected_fan_mode }}"
      - conditions:
          - "{{ not zone2_needs_heating }}"
          - "{{ zone2_current_mode == 'heat' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input zone2_hvac_entity
            data:
              hvac_mode: off
      - conditions:
          - "{{ zone2_needs_heating }}"
          - "{{ zone2_current_mode == 'heat' }}"
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input zone2_hvac_entity
            data:
              temperature: "{{ zone2_limited_target }}"
          - service: climate.set_fan_mode
            target:
              entity_id: !input zone2_hvac_entity
            data:
              fan_mode: "{{ zone2_selected_fan_mode }}"

  # Logging (KORRIGERAD FÖR ATT UNDVIKA TypeError)
  - service: system_log.write
    data:
      level: info
      message: >
        Multi-Zone HVAC Control:
        Global - Solar={{ solar_production | string }}W, Price={{ electricity_price | string }}öre, Excess={{ has_real_excess | string }}, NightMode={{ is_night_mode | string }}
        Zone1 - Temp={{ zone1_current_temp | string }}°C, Target={{ zone1_limited_target | string }}°C, Heating={{ zone1_needs_heating | string }}
        Zone2 - Temp={{ zone2_current_temp | string }}°C, Target={{ zone2_limited_target | string }}°C, Heating={{ zone2_needs_heating | string }}

mode: queued
max: 10
