blueprint:
  name: "Multi-Zone HVAC Control with Energy Price & Solar"
  description: "Control multiple HVAC zones based on temperature, electricity price, solar production, heat pump consumption, and hysteresis with auto off 1.0.7"
  domain: automation
  input:
    zone1_climate:
      name: Zone 1 Climate Entity
      selector:
        entity:
          domain: climate
    zone1_sensor:
      name: Zone 1 Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    zone1_target_high:
      name: Zone 1 High Temperature (Comfort)
      default: 22
      selector:
        number:
          min: 15
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    zone1_target_low:
      name: Zone 1 Low Temperature (Economy)
      default: 19
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    zone1_night_temp:
      name: Zone 1 Night Temperature
      default: 17
      selector:
        number:
          min: 5
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    zone2_climate:
      name: Zone 2 Climate Entity
      selector:
        entity:
          domain: climate
    zone2_sensor:
      name: Zone 2 Temperature Sensor
      selector:
        entity:
          domain: sensor
          device_class: temperature
    zone2_target_high:
      name: Zone 2 High Temperature (Comfort)
      default: 22
      selector:
        number:
          min: 15
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    zone2_target_low:
      name: Zone 2 Low Temperature (Economy)
      default: 19
      selector:
        number:
          min: 10
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    zone2_night_temp:
      name: Zone 2 Night Temperature
      default: 17
      selector:
        number:
          min: 5
          max: 25
          step: 0.5
          unit_of_measurement: "°C"
    solar_production:
      name: Solar Production Sensor
      selector:
        entity:
          domain: sensor
          device_class: power
    net_consumption:
      name: Net Consumption Sensor
      selector:
        entity:
          domain: sensor
          device_class: power
    electricity_price:
      name: Electricity Price Sensor
      selector:
        entity:
          domain: sensor
          device_class: monetary
    price_threshold:
      name: Low Price Threshold
      default: 50
      selector:
        number:
          min: 0
          max: 200
          unit_of_measurement: "öre"
    night_mode:
      name: Night Mode Toggle
      selector:
        entity:
          domain: input_boolean
    heatpump_consumption:
      name: Heat Pump Consumption Sensor
      selector:
        entity:
          domain: sensor
          device_class: power
    hysteresis:
      name: Hysteresis Value
      default: 0.5
      selector:
        number:
          min: 0.1
          max: 2
          step: 0.1
          unit_of_measurement: "°C"
    max_temperature:
      name: Max Temperature Limit
      default: 23.5
      selector:
        number:
          min: 15
          max: 30
          step: 0.5
          unit_of_measurement: "°C"
    boost_mode:
      name: Boost Mode Toggle
      selector:
        entity:
          domain: input_boolean
    boost_temperature:
      name: Boost Temperature Increase
      default: 1.0
      selector:
        number:
          min: 0
          max: 5
          step: 0.5
          unit_of_measurement: "°C"

variables:
  zone1_climate: !input zone1_climate
  zone2_climate: !input zone2_climate
  zone1_current_temp: "{{ states(zone1_sensor) | float(0) }}"
  zone2_current_temp: "{{ states(zone2_sensor) | float(0) }}"
  solar_production: "{{ states(solar_production) | float(0) }}"
  net_consumption: "{{ states(net_consumption) | float(0) }}"
  electricity_price: "{{ states(electricity_price) | float(0) }}"
  heatpump_consumption: "{{ states(heatpump_consumption) | float(0) }}"
  is_night_mode: "{{ is_state(night_mode, 'on') }}"
  is_boost_mode: "{{ is_state(boost_mode, 'on') }}"
  price_threshold: !input price_threshold
  hysteresis_value: !input hysteresis
  max_temp_limit: !input max_temperature
  temperature_boost_value: "{{ boost_temperature | float(0) }}"

  zone1_target_high: !input zone1_target_high
  zone1_target_low: !input zone1_target_low
  zone1_night_temp: !input zone1_night_temp
  zone2_target_high: !input zone2_target_high
  zone2_target_low: !input zone2_target_low
  zone2_night_temp: !input zone2_night_temp

  has_solar_production: "{{ solar_production > 500 }}"
  has_real_excess: "{{ solar_production > net_consumption + 500 }}"
  is_low_price: "{{ electricity_price < price_threshold }}"
  zone1_is_low_consumption: "{{ zone1_current_temp < (zone1_target_high | float) }}"
  zone2_is_low_consumption: "{{ zone2_current_temp < (zone2_target_high | float) }}"

  # Base targets
  zone1_base_target: >
    {% if is_night_mode %}
      {{ zone1_night_temp | float }}
    {% else %}
      {% set high = zone1_target_high | float %}
      {% set low = zone1_target_low | float %}
      {% if has_real_excess %}
        {{ high }}
      {% elif has_solar_production and is_low_price and zone1_is_low_consumption %}
        {{ ((high + low) / 2) | float }}
      {% elif is_low_price and zone1_is_low_consumption %}
        {{ ((high + low) / 2) | float }}
      {% else %}
        {{ low }}
      {% endif %}
    {% endif %}

  zone2_base_target: >
    {% if is_night_mode %}
      {{ zone2_night_temp | float }}
    {% else %}
      {% set high = zone2_target_high | float %}
      {% set low = zone2_target_low | float %}
      {% if has_real_excess %}
        {{ high }}
      {% elif has_solar_production and is_low_price and zone2_is_low_consumption %}
        {{ ((high + low) / 2) | float }}
      {% elif is_low_price and zone2_is_low_consumption %}
        {{ ((high + low) / 2) | float }}
      {% else %}
        {{ low }}
      {% endif %}
    {% endif %}

  zone1_final_target: >
    {{ (zone1_base_target | float + (temperature_boost_value if is_boost_mode else 0)) | float }}
  zone2_final_target: >
    {{ (zone2_base_target | float + (temperature_boost_value if is_boost_mode else 0)) | float }}

  zone1_limited_target: "{{ [zone1_final_target | float, max_temp_limit | float] | min }}"
  zone2_limited_target: "{{ [zone2_final_target | float, max_temp_limit | float] | min }}"

trigger:
  - platform: state
    entity_id:
      - !input solar_production
      - !input net_consumption
      - !input electricity_price
      - !input night_mode
      - !input boost_mode
      - !input zone1_sensor
      - !input zone2_sensor
      - !input heatpump_consumption

action:
  - choose:
      # Zone 1 control
      - conditions: >
          {{ zone1_current_temp | float > zone1_limited_target | float + hysteresis_value | float }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input zone1_climate
            data:
              hvac_mode: "off"

      - conditions: >
          {{ zone1_current_temp | float < zone1_limited_target | float - hysteresis_value | float }}
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input zone1_climate
            data:
              hvac_mode: "heat"
              temperature: "{{ zone1_limited_target | float }}"

      # Zone 2 control
      - conditions: >
          {{ zone2_current_temp | float > zone2_limited_target | float + hysteresis_value | float }}
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input zone2_climate
            data:
              hvac_mode: "off"

      - conditions: >
          {{ zone2_current_temp | float < zone2_limited_target | float - hysteresis_value | float }}
        sequence:
          - service: climate.set_temperature
            target:
              entity_id: !input zone2_climate
            data:
              hvac_mode: "heat"
              temperature: "{{ zone2_limited_target | float }}"

  - service: system_log.write
    data:
      message: >
        HVAC DEBUG:
        Solar={{ solar_production }}W, Net={{ net_consumption }}W,
        Price={{ electricity_price }}öre, Night={{ is_night_mode }},
        Z1_Target={{ zone1_limited_target }}, Z1_Temp={{ zone1_current_temp }},
        Z2_Target={{ zone2_limited_target }}, Z2_Temp={{ zone2_current_temp }}
      level: info
      logger: hvac_blueprint

mode: restart
