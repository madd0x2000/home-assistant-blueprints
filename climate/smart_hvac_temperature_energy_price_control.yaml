blueprint:
  name: "Smart HVAC Control with Energy Price & Solar"
  description: "Control HVAC based on temperature, electricity price and solar energy surplus. Optimizes for cost and comfort."
  domain: automation
  input:
    # Sensors
    temperature_sensor:
      name: "Temperature Sensor"
      selector:
        entity:
          domain: sensor
          device_class: temperature
          
    hvac_entity:
      name: "HVAC Entity"
      selector:
        entity:
          domain: climate
          
    energy_sensor:
      name: "Solar Energy Surplus/Deficit Sensor"
      description: "Sensor showing +W for surplus, -W for deficit"
      selector:
        entity:
          domain: sensor
          
    price_sensor:
      name: "Electricity Price Sensor"
      description: "Sensor with current_price attribute for current hourly price"
      selector:
        entity:
          domain: sensor

    # Temperature Settings
    target_temp_high:
      name: "Target Temperature at Good Conditions"
      default: 21
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"
          
    target_temp_low:
      name: "Target Temperature at Poor Conditions"
      default: 19
      selector:
        number:
          min: 10
          max: 31
          step: 0.5
          unit_of_measurement: "°C"

    # Thresholds
    energy_threshold:
      name: "Solar Energy Threshold (W)"
      description: "Minimum surplus to activate higher temperature"
      default: 500
      selector:
        number:
          min: 0
          max: 5000
          unit_of_measurement: "W"
          
    price_threshold:
      name: "Electricity Price Threshold (öre/kWh)"
      description: "Maximum price to be considered low price"
      default: 50
      selector:
        number:
          min: 0
          max: 500
          unit_of_measurement: "öre/kWh"

    # Fan Settings
    normal_fan_mode:
      name: "Normal Fan Mode"
      default: "auto"
      selector:
        select:
          options:
            - label: "Auto"
              value: "auto"
            - label: "Low"
              value: "1"
            - label: "Medium"
              value: "3"
            - label: "High"
              value: "5"

    boost_fan_mode:
      name: "Boost Fan Mode when Cold"
      description: "Fan mode when temperature is 2+ degrees below target"
      default: "4"
      selector:
        select:
          options:
            - label: "High"
              value: "5"
            - label: "Very High"
              value: "4"
            - label: "Maximum"
              value: "3"

    temp_difference:
      name: "Temperature Difference for Activation"
      default: 1.0
      selector:
        number:
          min: 0.5
          max: 3.0
          step: 0.5
          unit_of_measurement: "°C"

    boost_temp_difference:
      name: "Temperature Difference for Boost Mode"
      description: "How many degrees below target temperature to activate boost"
      default: 2.0
      selector:
        number:
          min: 1.0
          max: 5.0
          step: 0.5
          unit_of_measurement: "°C"

author: "Madd0x"
source: "https://github.com/madd0x2000/home-assistant-blueprints"
version: "1.0.0"

variables:
  current_temp: "{{ states(temperature_sensor) | float }}"
  energy_balance: "{{ states(energy_sensor) | float(0) }}"
  electricity_price: "{{ state_attr(price_sensor, 'current_price') | float(100) }}"
  hvac_state: "{{ states(hvac_entity) }}"
  hvac_mode: "{{ state_attr(hvac_entity, 'hvac_mode') }}"

trigger:
  - platform: state
    entity_id: !input temperature_sensor
  - platform: state
    entity_id: !input price_sensor
  - platform: state
    entity_id: !input energy_sensor
  - platform: time_pattern
    minutes: "/10"

action:
  - variables:
      # Calculate optimal temperature based on conditions
      has_solar_excess: "{{ energy_balance > energy_threshold }}"
      is_low_price: "{{ electricity_price < price_threshold }}"
      
      target_temperature: >
        {% if has_solar_excess and is_low_price %}
          {{ target_temp_high }}
        {% elif has_solar_excess or is_low_price %}
          {{ (target_temp_high + target_temp_low) / 2 }}
        {% else %}
          {{ target_temp_low }}
        {% endif %}

      # Calculate temperature difference
      temp_diff: "{{ target_temperature - current_temp }}"
      
      # Determine if heating is needed
      needs_heating: "{{ current_temp < (target_temperature - temp_difference) }}"
      
      # Determine if boost mode is needed (2+ degrees below target)
      needs_boost: "{{ temp_diff >= boost_temp_difference }}"
      
      # Select fan mode based on needs
      selected_fan_mode: >
        {% if needs_boost %}
          {{ boost_fan_mode }}
        {% else %}
          {{ normal_fan_mode }}
        {% endif %}

      current_mode: "{{ state_attr(hvac_entity, 'hvac_mode') }}"

  # HVAC Control
  - choose:
      - conditions:
          - "{{ needs_heating }}"
          - "{{ hvac_state == 'off' or current_mode != 'heat' }}"
        sequence:
          - service: climate.turn_on
            target:
              entity_id: !input hvac_entity
          - delay: "00:00:02"
          - service: climate.set_hvac_mode
            target:
              entity_id: !input hvac_entity
            data:
              hvac_mode: heat
          - delay: "00:00:03"

      - conditions:
          - "{{ not needs_heating }}"
          - "{{ current_mode == 'heat' }}"
        sequence:
          - service: climate.set_hvac_mode
            target:
              entity_id: !input hvac_entity
            data:
              hvac_mode: off

  # Update settings if heating is on
  - conditions:
      - "{{ needs_heating }}"
      - "{{ current_mode == 'heat' }}"
    sequence:
      - service: climate.set_temperature
        target:
          entity_id: !input hvac_entity
        data:
          temperature: "{{ target_temperature }}"

      - service: climate.set_fan_mode
        target:
          entity_id: !input hvac_entity
        data:
          fan_mode: "{{ selected_fan_mode }}"

  # Enhanced logging with fan info
  - service: system_log.write
    data:
      level: info
      message: >
        HVAC Control: 
        RoomTemp={{ current_temp }}°C, 
        TargetTemp={{ target_temperature }}°C,
        TempDiff={{ temp_diff }}°C,
        EnergyBalance={{ energy_balance }}W,
        ElectricityPrice={{ electricity_price }}öre,
        SolarSurplus={{ has_solar_excess }},
        LowPrice={{ is_low_price }},
        NeedsHeating={{ needs_heating }},
        BoostMode={{ needs_boost }},
        FanMode={{ selected_fan_mode }}

mode: queued
max: 5
